{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","props","componentDidMount","axios","get","then","response","setState","stats","data","catch","error","console","log","state","this","total_cases","cases","deaths","recovered","milliseconds","Date","updated","toString","className","map","node","key","uuid","src","countryInfo","flag","alt","country","iso3","todayCases","todayDeaths","active","critical","casesPerOneMillion","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"4SAKqBA,E,kDACnB,WAAYC,GAAQ,IAAD,8BACjB,cAAMA,IAORC,kBAAoB,WAClBC,IACGC,IAAI,iCACJC,MAAK,SAAAC,GACJ,EAAKC,SAAS,CAAEC,MAAOF,EAASG,UAEjCC,OAAM,SAAAC,GACLC,QAAQC,IAAIF,MAEhBR,IACGC,IAAI,uCACJC,MAAK,SAAAC,GACJ,EAAKC,SAAS,CAAEE,KAAMH,EAASG,UAEhCC,OAAM,SAAAC,GACLC,QAAQC,IAAIF,OArBhB,EAAKG,MAAQ,CACXL,KAAM,GACND,MAAO,IAJQ,E,qDA4BjB,IAAMC,EAAOM,KAAKD,MAAML,KAClBO,EAAcD,KAAKD,MAAMN,MAAMS,MAC/BC,EAASH,KAAKD,MAAMN,MAAMU,OAC1BC,EAAYJ,KAAKD,MAAMN,MAAMW,UAC7BC,EAAe,IAAIC,KAAKN,KAAKD,MAAMN,MAAMc,SAASC,WAExD,OACE,yBAAKC,UAAU,OACb,yBAAKA,UAAU,aACb,0BAAMA,UAAU,SAAhB,gBACe,gCAASR,IAGxB,0BAAMQ,UAAU,SAAhB,WACU,gCAASN,IAEnB,0BAAMM,UAAU,SAAhB,cACa,gCAASL,IAEtB,0BAAMK,UAAU,SAAhB,YACW,gCAASJ,IAEpB,+BACE,+BACE,4BACE,oCACA,uCACA,qCACA,qCACA,2CACA,sCACA,4CACA,yCACA,sCACA,wCACA,4CAGDX,EAAKgB,KAAI,SAAAC,GACR,OACE,wBAAIC,IAAKC,OACP,4BACE,yBACEJ,UAAU,OACVK,IAAKH,EAAKI,YAAYC,KACtBC,IAAG,UAAKN,EAAKO,QAAV,YAGP,4BAAKP,EAAKO,SACV,4BAC6B,YAA1BP,EAAKI,YAAYI,KACdR,EAAKI,YAAYI,KACjB,MAEN,4BAAKR,EAAKT,OACV,4BAAKS,EAAKS,YACV,4BAAKT,EAAKR,QACV,4BAAKQ,EAAKU,aACV,4BAAKV,EAAKP,WACV,4BAAKO,EAAKW,QACV,4BAAKX,EAAKY,UACV,4BAAKZ,EAAKa,gC,GA1FGC,IAAMC,WCOnBC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCXNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD4H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBhD,MAAK,SAAAiD,GACJA,EAAaC,gBAEd7C,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAM6C,c","file":"static/js/main.3869086a.chunk.js","sourcesContent":["import React from \"react\";\nimport \"./App.css\";\nimport uuid from \"react-uuid\";\nimport axios from \"axios\";\n\nexport default class App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      data: [],\n      stats: []\n    };\n  }\n\n  componentDidMount = () => {\n    axios\n      .get(\"https://corona.lmao.ninja/all\")\n      .then(response => {\n        this.setState({ stats: response.data });\n      })\n      .catch(error => {\n        console.log(error);\n      });\n    axios\n      .get(\"https://corona.lmao.ninja/countries\")\n      .then(response => {\n        this.setState({ data: response.data });\n      })\n      .catch(error => {\n        console.log(error);\n      });\n  };\n\n  render() {\n    const data = this.state.data;\n    const total_cases = this.state.stats.cases;\n    const deaths = this.state.stats.deaths;\n    const recovered = this.state.stats.recovered;\n    const milliseconds = new Date(this.state.stats.updated).toString();\n\n    return (\n      <div className=\"App\">\n        <div className=\"container\">\n          <span className=\"stats\">\n            Total cases: <strong>{total_cases}</strong>\n          </span>\n\n          <span className=\"stats\">\n            Deaths: <strong>{deaths}</strong>\n          </span>\n          <span className=\"stats\">\n            Recovered: <strong>{recovered}</strong>\n          </span>\n          <span className=\"stats\">\n            Updated: <strong>{milliseconds}</strong>\n          </span>\n          <table>\n            <tbody>\n              <tr>\n                <th>Flag</th>\n                <th>Country</th>\n                <th>Iso 3</th>\n                <th>Cases</th>\n                <th>Today Cases</th>\n                <th>Deaths</th>\n                <th>Today Deaths</th>\n                <th>Recovered</th>\n                <th>Active</th>\n                <th>Critical</th>\n                <th>Per Million</th>\n              </tr>\n\n              {data.map(node => {\n                return (\n                  <tr key={uuid()}>\n                    <td>\n                      <img\n                        className=\"flag\"\n                        src={node.countryInfo.flag}\n                        alt={`${node.country} Flag`}\n                      />\n                    </td>\n                    <td>{node.country}</td>\n                    <td>\n                      {node.countryInfo.iso3 !== \"NO DATA\"\n                        ? node.countryInfo.iso3\n                        : null}\n                    </td>\n                    <td>{node.cases}</td>\n                    <td>{node.todayCases}</td>\n                    <td>{node.deaths}</td>\n                    <td>{node.todayDeaths}</td>\n                    <td>{node.recovered}</td>\n                    <td>{node.active}</td>\n                    <td>{node.critical}</td>\n                    <td>{node.casesPerOneMillion}</td>\n                  </tr>\n                );\n              })}\n            </tbody>\n          </table>\n        </div>\n      </div>\n    );\n  }\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\n//import Pokemon from \"./Pokemon\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}